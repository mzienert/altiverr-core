{
  "version": 3,
  "sources": ["../asset-input/src/functions/auth/create-auth-challenge/index.ts"],
  "sourcesContent": ["import { CreateAuthChallengeTriggerEvent } from 'aws-lambda';\nimport { CognitoIdentityProvider } from '@aws-sdk/client-cognito-identity-provider';\nimport { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';\n\nconst cognito = new CognitoIdentityProvider({ region: 'us-west-1' });\nconst ses = new SESClient({ region: 'us-west-1' });\n\nexport const handler = async (event: CreateAuthChallengeTriggerEvent) => {\n    let secretLoginCode: string;\n    \n    if (!event.request.session || !event.request.session.length) {\n        // Generate a new secret login code\n        secretLoginCode = Math.floor(100000 + Math.random() * 900000).toString();\n        \n        try {\n            // Send email using SES\n            await ses.send(new SendEmailCommand({\n                Destination: {\n                    ToAddresses: [event.request.userAttributes.email],\n                },\n                Message: {\n                    Body: {\n                        Text: {\n                            Data: `Your ASA Racing verification code is: ${secretLoginCode}`,\n                        },\n                    },\n                    Subject: {\n                        Data: 'Your ASA Racing Verification Code',\n                    },\n                },\n                Source: 'admin@asaracing.live',\n            }));\n\n            // Set up the challenge with session\n            event.response.privateChallengeParameters = {\n                secretLoginCode,\n            };\n            event.response.publicChallengeParameters = {\n                email: event.request.userAttributes.email\n            };\n            event.response.challengeMetadata = secretLoginCode;  // Store code in metadata\n        } catch (error) {\n            console.error('Error in create-auth-challenge:', error);\n            throw error;\n        }\n    } else {\n        // Use the code from the previous challenge\n        const lastSession = event.request.session.slice(-1)[0];\n        secretLoginCode = lastSession.challengeMetadata || 'INVALID';\n        event.response.privateChallengeParameters = {\n            secretLoginCode,\n        };\n        event.response.publicChallengeParameters = {\n            email: event.request.userAttributes.email\n        };\n        event.response.challengeMetadata = secretLoginCode;\n    }\n\n    return event;\n}; "],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAAwC,qDACxCC,EAA4C,+BAEtCC,EAAU,IAAI,0BAAwB,CAAE,OAAQ,WAAY,CAAC,EAC7DC,EAAM,IAAI,YAAU,CAAE,OAAQ,WAAY,CAAC,EAEpCL,EAAU,MAAOM,GAA2C,CACrE,IAAIC,EAEJ,GAAI,CAACD,EAAM,QAAQ,SAAW,CAACA,EAAM,QAAQ,QAAQ,OAAQ,CAEzDC,EAAkB,KAAK,MAAM,IAAS,KAAK,OAAO,EAAI,GAAM,EAAE,SAAS,EAEvE,GAAI,CAEA,MAAMF,EAAI,KAAK,IAAI,mBAAiB,CAChC,YAAa,CACT,YAAa,CAACC,EAAM,QAAQ,eAAe,KAAK,CACpD,EACA,QAAS,CACL,KAAM,CACF,KAAM,CACF,KAAM,yCAAyCC,CAAe,EAClE,CACJ,EACA,QAAS,CACL,KAAM,mCACV,CACJ,EACA,OAAQ,sBACZ,CAAC,CAAC,EAGFD,EAAM,SAAS,2BAA6B,CACxC,gBAAAC,CACJ,EACAD,EAAM,SAAS,0BAA4B,CACvC,MAAOA,EAAM,QAAQ,eAAe,KACxC,EACAA,EAAM,SAAS,kBAAoBC,CACvC,OAASC,EAAO,CACZ,cAAQ,MAAM,kCAAmCA,CAAK,EAChDA,CACV,CACJ,MAGID,EADoBD,EAAM,QAAQ,QAAQ,MAAM,EAAE,EAAE,CAAC,EACvB,mBAAqB,UACnDA,EAAM,SAAS,2BAA6B,CACxC,gBAAAC,CACJ,EACAD,EAAM,SAAS,0BAA4B,CACvC,MAAOA,EAAM,QAAQ,eAAe,KACxC,EACAA,EAAM,SAAS,kBAAoBC,EAGvC,OAAOD,CACX",
  "names": ["create_auth_challenge_exports", "__export", "handler", "__toCommonJS", "import_client_cognito_identity_provider", "import_client_ses", "cognito", "ses", "event", "secretLoginCode", "error"]
}
