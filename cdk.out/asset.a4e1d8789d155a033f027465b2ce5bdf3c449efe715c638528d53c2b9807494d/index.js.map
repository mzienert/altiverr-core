{
  "version": 3,
  "sources": ["../asset-input/src/functions/auth/manage-session/index.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\n\ninterface CookieOptions {\n    httpOnly?: boolean;\n    secure?: boolean;\n    sameSite?: 'strict' | 'lax' | 'none';\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n}\n\ntype APIGatewayProxyResultWithMultiValueHeaders = Omit<APIGatewayProxyResult, 'headers'> & {\n    headers: { [header: string]: string | number | boolean | string[] };\n};\n\nexport const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResultWithMultiValueHeaders> => {\n    const corsHeaders = {\n        'Access-Control-Allow-Origin': 'https://www.asaracing.live',\n        'Access-Control-Allow-Credentials': 'true',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n    };\n\n    // Log at the very start of the function\n    console.log('Lambda started');\n    console.log('Event:', JSON.stringify(event, null, 2));\n\n    process.on('uncaughtException', (err) => {\n        console.error('Uncaught Exception:', err);\n    });\n\n    process.on('unhandledRejection', (err) => {\n        console.error('Unhandled Rejection:', err);\n    });\n\n    try {\n        // Handle OPTIONS preflight request\n        if (event.httpMethod === 'OPTIONS') {\n            return {\n                statusCode: 200,\n                headers: corsHeaders,\n                body: ''\n            };\n        }\n\n        // Handle verify request (GET)\n        if (event.resource === '/auth/manage-session/verify') {\n            const cookies = event.headers.Cookie || event.headers.cookie;\n            return {\n                statusCode: 200,\n                headers: corsHeaders,\n                body: JSON.stringify({\n                    cookiesPresent: !!cookies,\n                    cookies: cookies ? parseCookies(cookies) : null\n                })\n            };\n        }\n\n        // Handle POST request for session creation\n        if (event.httpMethod === 'POST' && event.resource === '/auth/manage-session') {\n            const body = JSON.parse(event.body || '{}');\n            const { accessToken, idToken } = body;\n\n            if (!accessToken || !idToken) {\n                return {\n                    statusCode: 400,\n                    headers: corsHeaders,\n                    body: JSON.stringify({ message: 'Missing required tokens' })\n                };\n            }\n\n            // Set cookies with proper security flags\n            const cookieSettings = 'HttpOnly; Secure; SameSite=None; Domain=asaracing.live; Path=/';\n            const cookies = [\n                `accessToken=${accessToken}; ${cookieSettings}`,\n                `idToken=${idToken}; ${cookieSettings}`\n            ];\n\n            return {\n                statusCode: 200,\n                headers: {\n                    ...corsHeaders,\n                    'Set-Cookie': cookies as string[]\n                },\n                body: JSON.stringify({ success: true })\n            };\n        }\n\n        // Handle session creation (POST)\n        if (!event.body) {\n            return {\n                statusCode: 400,\n                headers: corsHeaders,\n                body: JSON.stringify({ message: 'Missing request body' })\n            };\n        }\n\n        const { accessToken, idToken } = JSON.parse(event.body);\n        if (!accessToken || !idToken) {\n            return {\n                statusCode: 400,\n                headers: corsHeaders,\n                body: JSON.stringify({ message: 'Missing required tokens' })\n            };\n        }\n\n        // Set cookies\n        return {\n            statusCode: 200,\n            headers: {\n                'Access-Control-Allow-Origin': 'https://www.asaracing.live',\n                'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',\n                'Access-Control-Allow-Headers': 'Content-Type,Authorization,Origin,Access-Control-Request-Method,Access-Control-Request-Headers',\n                'Access-Control-Allow-Credentials': 'true',\n                'Access-Control-Max-Age': '300',\n                'Set-Cookie': [\n                    `accessToken=${accessToken}; HttpOnly; Secure; Path=/; SameSite=None; Max-Age=3600`,\n                    `idToken=${idToken}; HttpOnly; Secure; Path=/; SameSite=None; Max-Age=3600`\n                ].join('; ')\n            },\n            body: JSON.stringify({ success: true })\n        };\n\n    } catch (error) {\n        console.error('Error in handler:', error);\n        return {\n            statusCode: 500,\n            headers: corsHeaders,\n            body: JSON.stringify({ \n                message: 'Internal server error',\n                error: error instanceof Error ? error.message : String(error)\n            })\n        };\n    } finally {\n        console.log('Lambda finished');\n    }\n};\n\nfunction parseCookies(cookieString: string) {\n    return cookieString.split(';')\n        .map(cookie => cookie.trim())\n        .reduce((acc, cookie) => {\n            const [key, value] = cookie.split('=');\n            acc[key] = value;\n            return acc;\n        }, {} as Record<string, string>);\n}"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAeO,IAAME,EAAU,MAAOE,GAAqF,CAC/G,IAAMC,EAAc,CAChB,8BAA+B,6BAC/B,mCAAoC,OACpC,+BAAgC,gBAChC,+BAAgC,cACpC,EAGA,QAAQ,IAAI,gBAAgB,EAC5B,QAAQ,IAAI,SAAU,KAAK,UAAUD,EAAO,KAAM,CAAC,CAAC,EAEpD,QAAQ,GAAG,oBAAsBE,GAAQ,CACrC,QAAQ,MAAM,sBAAuBA,CAAG,CAC5C,CAAC,EAED,QAAQ,GAAG,qBAAuBA,GAAQ,CACtC,QAAQ,MAAM,uBAAwBA,CAAG,CAC7C,CAAC,EAED,GAAI,CAEA,GAAIF,EAAM,aAAe,UACrB,MAAO,CACH,WAAY,IACZ,QAASC,EACT,KAAM,EACV,EAIJ,GAAID,EAAM,WAAa,8BAA+B,CAClD,IAAMG,EAAUH,EAAM,QAAQ,QAAUA,EAAM,QAAQ,OACtD,MAAO,CACH,WAAY,IACZ,QAASC,EACT,KAAM,KAAK,UAAU,CACjB,eAAgB,CAAC,CAACE,EAClB,QAASA,EAAUC,EAAaD,CAAO,EAAI,IAC/C,CAAC,CACL,CACJ,CAGA,GAAIH,EAAM,aAAe,QAAUA,EAAM,WAAa,uBAAwB,CAC1E,IAAMK,EAAO,KAAK,MAAML,EAAM,MAAQ,IAAI,EACpC,CAAE,YAAAM,EAAa,QAAAC,CAAQ,EAAIF,EAEjC,GAAI,CAACC,GAAe,CAACC,EACjB,MAAO,CACH,WAAY,IACZ,QAASN,EACT,KAAM,KAAK,UAAU,CAAE,QAAS,yBAA0B,CAAC,CAC/D,EAIJ,IAAMO,EAAiB,iEACjBL,EAAU,CACZ,eAAeG,CAAW,KAAKE,CAAc,GAC7C,WAAWD,CAAO,KAAKC,CAAc,EACzC,EAEA,MAAO,CACH,WAAY,IACZ,QAAS,CACL,GAAGP,EACH,aAAcE,CAClB,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,EAAK,CAAC,CAC1C,CACJ,CAGA,GAAI,CAACH,EAAM,KACP,MAAO,CACH,WAAY,IACZ,QAASC,EACT,KAAM,KAAK,UAAU,CAAE,QAAS,sBAAuB,CAAC,CAC5D,EAGJ,GAAM,CAAE,YAAAK,EAAa,QAAAC,CAAQ,EAAI,KAAK,MAAMP,EAAM,IAAI,EACtD,MAAI,CAACM,GAAe,CAACC,EACV,CACH,WAAY,IACZ,QAASN,EACT,KAAM,KAAK,UAAU,CAAE,QAAS,yBAA0B,CAAC,CAC/D,EAIG,CACH,WAAY,IACZ,QAAS,CACL,8BAA+B,6BAC/B,+BAAgC,mBAChC,+BAAgC,iGAChC,mCAAoC,OACpC,yBAA0B,MAC1B,aAAc,CACV,eAAeK,CAAW,0DAC1B,WAAWC,CAAO,yDACtB,EAAE,KAAK,IAAI,CACf,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,EAAK,CAAC,CAC1C,CAEJ,OAASE,EAAO,CACZ,eAAQ,MAAM,oBAAqBA,CAAK,EACjC,CACH,WAAY,IACZ,QAASR,EACT,KAAM,KAAK,UAAU,CACjB,QAAS,wBACT,MAAOQ,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAChE,CAAC,CACL,CACJ,QAAE,CACE,QAAQ,IAAI,iBAAiB,CACjC,CACJ,EAEA,SAASL,EAAaM,EAAsB,CACxC,OAAOA,EAAa,MAAM,GAAG,EACxB,IAAIC,GAAUA,EAAO,KAAK,CAAC,EAC3B,OAAO,CAACC,EAAKD,IAAW,CACrB,GAAM,CAACE,EAAKC,CAAK,EAAIH,EAAO,MAAM,GAAG,EACrC,OAAAC,EAAIC,CAAG,EAAIC,EACJF,CACX,EAAG,CAAC,CAA2B,CACvC",
  "names": ["manage_session_exports", "__export", "handler", "__toCommonJS", "event", "corsHeaders", "err", "cookies", "parseCookies", "body", "accessToken", "idToken", "cookieSettings", "error", "cookieString", "cookie", "acc", "key", "value"]
}
