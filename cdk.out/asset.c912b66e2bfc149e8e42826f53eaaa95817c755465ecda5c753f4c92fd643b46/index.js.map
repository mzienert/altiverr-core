{
  "version": 3,
  "sources": ["../asset-input/src/functions/auth/manage-session/index.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\n\ninterface CookieOptions {\n    httpOnly?: boolean;\n    secure?: boolean;\n    sameSite?: 'strict' | 'lax' | 'none';\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n}\n\nexport const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n    // Get origin from request\n    const origin = event.headers.origin || event.headers.Origin || 'https://www.asaracing.live';\n\n    // Basic CORS headers\n    const headers = {\n        'Access-Control-Allow-Origin': 'https://www.asaracing.live',\n        'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',\n        'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\n        'Access-Control-Allow-Credentials': 'true'\n    };\n\n    // Handle OPTIONS request\n    if (event.httpMethod === 'OPTIONS') {\n        return {\n            statusCode: 200,\n            headers,\n            body: ''\n        };\n    }\n\n    try {\n        // Handle verify request (GET)\n        if (event.resource === '/auth/session/verify') {\n            const cookies = event.headers.Cookie || event.headers.cookie;\n            return {\n                statusCode: 200,\n                headers,\n                body: JSON.stringify({\n                    cookiesPresent: !!cookies,\n                    cookies: cookies ? parseCookies(cookies) : null\n                })\n            };\n        }\n\n        // Handle session creation (POST)\n        if (!event.body) {\n            return {\n                statusCode: 400,\n                headers,\n                body: JSON.stringify({ message: 'Missing request body' })\n            };\n        }\n\n        const { accessToken, idToken } = JSON.parse(event.body);\n        if (!accessToken || !idToken) {\n            return {\n                statusCode: 400,\n                headers,\n                body: JSON.stringify({ message: 'Missing required tokens' })\n            };\n        }\n\n        // Set cookies\n        return {\n            statusCode: 200,\n            headers: {\n                ...headers,\n                'Set-Cookie': [\n                    `accessToken=${accessToken}; HttpOnly; Secure; Path=/; SameSite=None; Max-Age=3600`,\n                    `idToken=${idToken}; HttpOnly; Secure; Path=/; SameSite=None; Max-Age=3600`\n                ].join('; ')\n            },\n            body: JSON.stringify({ success: true })\n        };\n\n    } catch (error) {\n        console.error('Error:', error);\n        return {\n            statusCode: 500,\n            headers,\n            body: JSON.stringify({ message: 'Internal server error' })\n        };\n    }\n};\n\nfunction parseCookies(cookieString: string) {\n    return cookieString.split(';')\n        .map(cookie => cookie.trim())\n        .reduce((acc, cookie) => {\n            const [key, value] = cookie.split('=');\n            acc[key] = value;\n            return acc;\n        }, {} as Record<string, string>);\n}\n\nfunction serializeCookieOptions(options: CookieOptions): string {\n    const parts = [];\n    \n    if (options.httpOnly) parts.push('HttpOnly');\n    if (options.secure) parts.push('Secure');\n    if (options.sameSite) parts.push(`SameSite=${options.sameSite}`);\n    if (options.maxAge) parts.push(`Max-Age=${Math.floor(options.maxAge / 1000)}`);\n    if (options.domain) parts.push(`Domain=${options.domain}`);\n    if (options.path) parts.push(`Path=${options.path}`);\n    \n    return parts.join('; ');\n} "],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAWO,IAAME,EAAU,MAAOE,GAAgE,CAE1F,IAAMC,EAASD,EAAM,QAAQ,QAAUA,EAAM,QAAQ,QAAU,6BAGzDE,EAAU,CACZ,8BAA+B,6BAC/B,+BAAgC,mBAChC,+BAAgC,uEAChC,mCAAoC,MACxC,EAGA,GAAIF,EAAM,aAAe,UACrB,MAAO,CACH,WAAY,IACZ,QAAAE,EACA,KAAM,EACV,EAGJ,GAAI,CAEA,GAAIF,EAAM,WAAa,uBAAwB,CAC3C,IAAMG,EAAUH,EAAM,QAAQ,QAAUA,EAAM,QAAQ,OACtD,MAAO,CACH,WAAY,IACZ,QAAAE,EACA,KAAM,KAAK,UAAU,CACjB,eAAgB,CAAC,CAACC,EAClB,QAASA,EAAUC,EAAaD,CAAO,EAAI,IAC/C,CAAC,CACL,CACJ,CAGA,GAAI,CAACH,EAAM,KACP,MAAO,CACH,WAAY,IACZ,QAAAE,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,sBAAuB,CAAC,CAC5D,EAGJ,GAAM,CAAE,YAAAG,EAAa,QAAAC,CAAQ,EAAI,KAAK,MAAMN,EAAM,IAAI,EACtD,MAAI,CAACK,GAAe,CAACC,EACV,CACH,WAAY,IACZ,QAAAJ,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,yBAA0B,CAAC,CAC/D,EAIG,CACH,WAAY,IACZ,QAAS,CACL,GAAGA,EACH,aAAc,CACV,eAAeG,CAAW,0DAC1B,WAAWC,CAAO,yDACtB,EAAE,KAAK,IAAI,CACf,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,EAAK,CAAC,CAC1C,CAEJ,OAASC,EAAO,CACZ,eAAQ,MAAM,SAAUA,CAAK,EACtB,CACH,WAAY,IACZ,QAAAL,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,uBAAwB,CAAC,CAC7D,CACJ,CACJ,EAEA,SAASE,EAAaI,EAAsB,CACxC,OAAOA,EAAa,MAAM,GAAG,EACxB,IAAIC,GAAUA,EAAO,KAAK,CAAC,EAC3B,OAAO,CAACC,EAAKD,IAAW,CACrB,GAAM,CAACE,EAAKC,CAAK,EAAIH,EAAO,MAAM,GAAG,EACrC,OAAAC,EAAIC,CAAG,EAAIC,EACJF,CACX,EAAG,CAAC,CAA2B,CACvC",
  "names": ["manage_session_exports", "__export", "handler", "__toCommonJS", "event", "origin", "headers", "cookies", "parseCookies", "accessToken", "idToken", "error", "cookieString", "cookie", "acc", "key", "value"]
}
