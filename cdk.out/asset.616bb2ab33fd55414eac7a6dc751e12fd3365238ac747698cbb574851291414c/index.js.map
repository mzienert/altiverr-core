{
  "version": 3,
  "sources": ["../asset-input/src/functions/auth/manage-session/index.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\n\ninterface CookieOptions {\n    httpOnly?: boolean;\n    secure?: boolean;\n    sameSite?: 'strict' | 'lax' | 'none';\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n}\n\nexport const handler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n    const origin = event.headers.origin || event.headers.Origin;\n    const allowedOrigins = (process.env.ALLOWED_ORIGIN || '').split(',');\n    const allowedOrigin = origin && allowedOrigins.includes(origin) ? origin : allowedOrigins[0];\n\n    // Handle verify request (GET)\n    if (event.resource === '/auth/session/verify') {\n        const cookies = event.headers.Cookie || event.headers.cookie;\n        return {\n            statusCode: 200,\n            headers: {\n                'Access-Control-Allow-Origin': allowedOrigin,\n                'Access-Control-Allow-Credentials': 'true'\n            },\n            body: JSON.stringify({\n                cookiesPresent: !!cookies,\n                cookies: cookies ? parseCookies(cookies) : null\n            })\n        };\n    }\n\n    // Handle session creation (POST)\n    try {\n        if (!event.body) {\n            return {\n                statusCode: 400,\n                headers: {\n                    'Access-Control-Allow-Origin': allowedOrigin,\n                    'Access-Control-Allow-Credentials': 'true'\n                },\n                body: JSON.stringify({ message: 'Missing request body' })\n            };\n        }\n\n        const { accessToken, idToken } = JSON.parse(event.body);\n\n        if (!accessToken || !idToken) {\n            return {\n                statusCode: 400,\n                headers: {\n                    'Access-Control-Allow-Origin': allowedOrigin,\n                    'Access-Control-Allow-Credentials': 'true'\n                },\n                body: JSON.stringify({ message: 'Missing required tokens' })\n            };\n        }\n\n        const cookieOptions = {\n            httpOnly: true,\n            secure: true,\n            sameSite: 'strict',\n            maxAge: 24 * 60 * 60 * 1000\n        };\n\n        const cookies = [\n            `accessToken=${accessToken}; ${serializeCookieOptions(cookieOptions)}`,\n            `idToken=${idToken}; ${serializeCookieOptions(cookieOptions)}`\n        ];\n\n        return {\n            statusCode: 200,\n            headers: {\n                'Set-Cookie': cookies.join('; '),\n                'Access-Control-Allow-Origin': allowedOrigin,\n                'Access-Control-Allow-Credentials': 'true'\n            },\n            body: JSON.stringify({ success: true })\n        };\n    } catch (error) {\n        return {\n            statusCode: 500,\n            headers: {\n                'Access-Control-Allow-Origin': allowedOrigin,\n                'Access-Control-Allow-Credentials': 'true'\n            },\n            body: JSON.stringify({ message: 'Internal server error' })\n        };\n    }\n};\n\nfunction parseCookies(cookieString: string) {\n    return cookieString.split(';')\n        .map(cookie => cookie.trim())\n        .reduce((acc, cookie) => {\n            const [key, value] = cookie.split('=');\n            acc[key] = value;\n            return acc;\n        }, {} as Record<string, string>);\n}\n\nfunction serializeCookieOptions(options: CookieOptions): string {\n    const parts = [];\n    \n    if (options.httpOnly) parts.push('HttpOnly');\n    if (options.secure) parts.push('Secure');\n    if (options.sameSite) parts.push(`SameSite=${options.sameSite}`);\n    if (options.maxAge) parts.push(`Max-Age=${Math.floor(options.maxAge / 1000)}`);\n    if (options.domain) parts.push(`Domain=${options.domain}`);\n    if (options.path) parts.push(`Path=${options.path}`);\n    \n    return parts.join('; ');\n} "],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAWO,IAAME,EAAU,MAAOE,GAAgE,CAC1F,IAAMC,EAASD,EAAM,QAAQ,QAAUA,EAAM,QAAQ,OAC/CE,GAAkB,QAAQ,IAAI,gBAAkB,IAAI,MAAM,GAAG,EAC7DC,EAAgBF,GAAUC,EAAe,SAASD,CAAM,EAAIA,EAASC,EAAe,CAAC,EAG3F,GAAIF,EAAM,WAAa,uBAAwB,CAC3C,IAAMI,EAAUJ,EAAM,QAAQ,QAAUA,EAAM,QAAQ,OACtD,MAAO,CACH,WAAY,IACZ,QAAS,CACL,8BAA+BG,EAC/B,mCAAoC,MACxC,EACA,KAAM,KAAK,UAAU,CACjB,eAAgB,CAAC,CAACC,EAClB,QAASA,EAAUC,EAAaD,CAAO,EAAI,IAC/C,CAAC,CACL,CACJ,CAGA,GAAI,CACA,GAAI,CAACJ,EAAM,KACP,MAAO,CACH,WAAY,IACZ,QAAS,CACL,8BAA+BG,EAC/B,mCAAoC,MACxC,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,sBAAuB,CAAC,CAC5D,EAGJ,GAAM,CAAE,YAAAG,EAAa,QAAAC,CAAQ,EAAI,KAAK,MAAMP,EAAM,IAAI,EAEtD,GAAI,CAACM,GAAe,CAACC,EACjB,MAAO,CACH,WAAY,IACZ,QAAS,CACL,8BAA+BJ,EAC/B,mCAAoC,MACxC,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,yBAA0B,CAAC,CAC/D,EAGJ,IAAMK,EAAgB,CAClB,SAAU,GACV,OAAQ,GACR,SAAU,SACV,OAAQ,GAAK,GAAK,GAAK,GAC3B,EAOA,MAAO,CACH,WAAY,IACZ,QAAS,CACL,aARQ,CACZ,eAAeF,CAAW,KAAKG,EAAuBD,CAAa,CAAC,GACpE,WAAWD,CAAO,KAAKE,EAAuBD,CAAa,CAAC,EAChE,EAK8B,KAAK,IAAI,EAC/B,8BAA+BL,EAC/B,mCAAoC,MACxC,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,EAAK,CAAC,CAC1C,CACJ,MAAgB,CACZ,MAAO,CACH,WAAY,IACZ,QAAS,CACL,8BAA+BA,EAC/B,mCAAoC,MACxC,EACA,KAAM,KAAK,UAAU,CAAE,QAAS,uBAAwB,CAAC,CAC7D,CACJ,CACJ,EAEA,SAASE,EAAaK,EAAsB,CACxC,OAAOA,EAAa,MAAM,GAAG,EACxB,IAAIC,GAAUA,EAAO,KAAK,CAAC,EAC3B,OAAO,CAACC,EAAKD,IAAW,CACrB,GAAM,CAACE,EAAKC,CAAK,EAAIH,EAAO,MAAM,GAAG,EACrC,OAAAC,EAAIC,CAAG,EAAIC,EACJF,CACX,EAAG,CAAC,CAA2B,CACvC,CAEA,SAASH,EAAuBM,EAAgC,CAC5D,IAAMC,EAAQ,CAAC,EAEf,OAAID,EAAQ,UAAUC,EAAM,KAAK,UAAU,EACvCD,EAAQ,QAAQC,EAAM,KAAK,QAAQ,EACnCD,EAAQ,UAAUC,EAAM,KAAK,YAAYD,EAAQ,QAAQ,EAAE,EAC3DA,EAAQ,QAAQC,EAAM,KAAK,WAAW,KAAK,MAAMD,EAAQ,OAAS,GAAI,CAAC,EAAE,EACzEA,EAAQ,QAAQC,EAAM,KAAK,UAAUD,EAAQ,MAAM,EAAE,EACrDA,EAAQ,MAAMC,EAAM,KAAK,QAAQD,EAAQ,IAAI,EAAE,EAE5CC,EAAM,KAAK,IAAI,CAC1B",
  "names": ["manage_session_exports", "__export", "handler", "__toCommonJS", "event", "origin", "allowedOrigins", "allowedOrigin", "cookies", "parseCookies", "accessToken", "idToken", "cookieOptions", "serializeCookieOptions", "cookieString", "cookie", "acc", "key", "value", "options", "parts"]
}
